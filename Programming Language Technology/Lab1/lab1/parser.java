
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Nov 14 10:48:42 CET 2018
//----------------------------------------------------

package lab1;


/** CUP v0.10k generated parser.
  * @version Wed Nov 14 10:48:42 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\003\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\010\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\003\000\002\007\005\000\002\010\002\000\002" +
    "\010\003\000\002\010\005\000\002\011\002\000\002\011" +
    "\004\000\002\012\004\000\002\013\004\000\002\013\002" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\015\006\000\002\015\005\000\002\015\007\000\002" +
    "\015\007\000\002\015\005\000\002\015\007\000\002\015" +
    "\005\000\002\015\010\000\002\016\004\000\002\016\002" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\006\000\002" +
    "\017\005\000\002\020\006\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\003\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\007\000" +
    "\002\031\003\000\002\032\004\000\002\032\003\000\002" +
    "\033\003\000\002\034\003\000\002\035\003\000\002\036" +
    "\003\000\002\037\002\000\002\037\004\000\002\040\002" +
    "\000\002\040\003\000\002\040\005\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\136\002\uffff\004\uffff\006\uffff\010\uffff\013" +
    "\uffff\014\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\001\002\000\004\002\250\001\002" +
    "\000\136\002\000\004\025\006\024\010\uffb0\013\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\050\044\051\043\052" +
    "\040\053\036\055\022\056\021\057\017\060\016\061\014" +
    "\062\012\063\010\064\006\065\033\066\061\067\026\070" +
    "\055\071\023\001\002\000\004\004\244\001\002\000\104" +
    "\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\014\005\uffa7\012\uffa7\046\uffa7\047\uffa7" +
    "\071\uffa7\001\002\000\104\004\025\005\uffb0\010\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066" +
    "\061\067\026\070\055\071\023\001\002\000\004\071\120" +
    "\001\002\000\104\004\025\005\uffb0\010\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067" +
    "\026\070\055\071\023\001\002\000\004\071\120\001\002" +
    "\000\104\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067\026\070" +
    "\055\071\023\001\002\000\112\004\025\005\uffb0\010\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\060\016\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\104\004\025\010\uffb0\013\uffb0\014\uffb0" +
    "\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\060\016\065\033\066\061" +
    "\067\026\070\055\071\023\001\002\000\136\002\ufffe\004" +
    "\ufffe\006\ufffe\010\ufffe\013\ufffe\014\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\001\002" +
    "\000\014\005\uffa9\012\uffa9\046\uffa9\047\uffa9\071\uffa9\001" +
    "\002\000\004\004\221\001\002\000\102\004\213\005\ufff8" +
    "\010\ufff8\011\121\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\071\ufff8\001\002\000\134\004" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3\014\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002" +
    "\000\104\004\025\005\uffb0\013\uffb0\014\uffb0\016\uffb0\017" +
    "\uffb0\020\015\021\013\022\011\023\007\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\060\016\065\033\066\061\067\026\070" +
    "\055\071\023\001\002\000\070\005\uffe1\010\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000\044" +
    "\005\uffc0\010\uffc0\012\uffc0\013\uffc0\015\uffc0\032\176\033" +
    "\201\034\200\035\177\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\001\002\000\034\005" +
    "\uffb1\010\uffb1\012\uffb1\013\uffb1\015\uffb1\036\174\037\173" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\001" +
    "\002\000\030\005\uffb2\010\uffb2\012\uffb2\013\uffb2\015\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\001" +
    "\002\000\030\005\uffb3\010\uffb3\012\uffb3\013\uffb3\015\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\001" +
    "\002\000\072\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\022\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\065\033\001\002\000\030\005\uffbe" +
    "\010\uffbe\012\uffbe\013\uffbe\015\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\001\002\000\030\005\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\015\uffbc\040\164\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002\000\014\005\uffaa" +
    "\012\uffaa\046\uffaa\047\uffaa\071\uffaa\001\002\000\026\005" +
    "\uffb7\010\uffb7\012\uffb7\013\160\015\uffb7\041\156\042\157" +
    "\043\155\044\154\045\uffb7\001\002\000\020\050\044\051" +
    "\043\052\040\053\036\056\021\063\010\071\120\001\002" +
    "\000\012\005\uffb5\010\uffb5\012\uffb5\015\uffb5\001\002\000" +
    "\012\005\uffb4\010\uffb4\012\uffb4\015\uffb4\001\002\000\014" +
    "\005\uffa8\012\uffa8\046\uffa8\047\uffa8\071\uffa8\001\002\000" +
    "\014\005\uffab\012\uffab\046\uffab\047\uffab\071\uffab\001\002" +
    "\000\136\002\ufffb\004\ufffb\006\ufffb\010\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\071\ufffb\001\002\000\066\010\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\017\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\046\uffa3\047\uffa3\071\uffa3\001\002\000\070\005\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\001\002\000\004\010\152\001\002\000\070\005\uffd7\010" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\001" +
    "\002\000\010\046\110\047\112\071\111\001\002\000\070" +
    "\005\uffd2\010\uffd2\012\uffd2\013\uffd2\014\102\015\uffd2\016" +
    "\101\017\103\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\001\002\000\062\005\uffce\010\uffce\012\uffce\013" +
    "\uffce\015\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\001\002\000\070\005\uffe0\010\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\022\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002\000\062\005" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\015\uffcb\022\073\024\072" +
    "\025\071\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000\054\005" +
    "\uffc8\010\uffc8\012\uffc8\013\uffc8\015\uffc8\026\067\027\066" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\001\002\000\050\005\uffc3\010\uffc3\012\uffc3\013" +
    "\uffc3\015\uffc3\030\063\031\062\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\001\002\000\070\005\uffde\010\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\001\002" +
    "\000\112\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011" +
    "\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065" +
    "\033\066\061\067\026\070\055\071\023\001\002\000\112" +
    "\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066" +
    "\061\067\026\070\055\071\023\001\002\000\070\005\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\001\002\000\054\005\uffca\010\uffca\012\uffca\013\uffca\015" +
    "\uffca\026\067\027\066\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\001\002\000\112\004\025" +
    "\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\015\021\013\022\011\023\007\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067" +
    "\026\070\055\071\023\001\002\000\112\004\025\005\uffb0" +
    "\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\015\021\013\022\011\023\007\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067\026\070" +
    "\055\071\023\001\002\000\062\005\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\015\uffcd\022\073\024\072\025\071\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\001\002\000\112\004\025\005\uffb0\010\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\112\004\025\005\uffb0\010\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015\021" +
    "\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\065\033\066\061\067\026\070\055\071\023\001" +
    "\002\000\112\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015\021\013\022" +
    "\011\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\065\033\066\061\067\026\070\055\071\023\001\002\000" +
    "\062\005\uffd1\010\uffd1\012\uffd1\013\uffd1\015\uffd1\022\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\001\002\000" +
    "\062\005\uffd0\010\uffd0\012\uffd0\013\uffd0\015\uffd0\022\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\001\002\000" +
    "\062\005\uffcf\010\uffcf\012\uffcf\013\uffcf\015\uffcf\022\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\001\002\000" +
    "\062\005\uffcc\010\uffcc\012\uffcc\013\uffcc\015\uffcc\022\073" +
    "\024\072\025\071\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\001\002\000" +
    "\054\005\uffc9\010\uffc9\012\uffc9\013\uffc9\015\uffc9\026\067" +
    "\027\066\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\001\002\000\104\004\025\005\uffb0\010" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065" +
    "\033\066\061\067\026\070\055\071\023\001\002\000\104" +
    "\004\025\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\060\016\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\104\004\025\005\uffb0\010\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061" +
    "\067\026\070\055\071\023\001\002\000\070\005\uffd8\010" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\001" +
    "\002\000\004\015\106\001\002\000\070\005\uffda\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\001\002" +
    "\000\070\005\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\001\002\000\014\005\uffa5\012\uffa5\046" +
    "\uffa5\047\uffa5\071\uffa5\001\002\000\012\004\114\010\113" +
    "\012\116\013\115\001\002\000\014\005\uffa4\012\uffa4\046" +
    "\uffa4\047\uffa4\071\uffa4\001\002\000\142\002\uffea\004\uffea" +
    "\006\uffea\007\uffea\010\uffea\013\uffea\014\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea" +
    "\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071" +
    "\uffea\001\002\000\022\005\ufff6\050\044\051\043\052\040" +
    "\053\036\056\021\063\010\071\120\001\002\000\104\004" +
    "\025\010\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\015" +
    "\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\060\016\065\033\066\061\067\026\070\055\071\023" +
    "\001\002\000\004\071\120\001\002\000\004\010\123\001" +
    "\002\000\100\005\ufff8\010\ufff8\011\121\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\022\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\071\ufff8" +
    "\001\002\000\004\071\120\001\002\000\076\005\ufff7\010" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\071\ufff7\001\002\000\142\002\uffe9\004\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\013\uffe9\014\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\001\002\000\004\010\125\001\002\000\142\002\uffe8" +
    "\004\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\071\uffe8\001\002\000\014\005\uffef\012\uffef\046\110" +
    "\047\112\071\145\001\002\000\004\005\134\001\002\000" +
    "\014\005\uffa3\012\uffa3\046\uffa3\047\uffa3\071\uffa3\001\002" +
    "\000\006\005\ufff5\012\132\001\002\000\022\005\ufff6\050" +
    "\044\051\043\052\040\053\036\056\021\063\010\071\120" +
    "\001\002\000\004\005\ufff4\001\002\000\006\006\136\010" +
    "\135\001\002\000\136\002\ufff9\004\ufff9\006\ufff9\010\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\001\002\000\134\004\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002\000\136" +
    "\002\ufffd\004\ufffd\006\ufffd\010\ufffd\013\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\001\002\000\134\004\025\006\024\007\141\010\uffb0" +
    "\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\015\021\013\022" +
    "\011\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\050\044" +
    "\051\043\052\040\053\036\055\022\056\021\057\017\060" +
    "\016\061\014\063\010\064\006\065\033\066\061\067\026" +
    "\070\055\071\023\001\002\000\136\002\ufffa\004\ufffa\006" +
    "\ufffa\010\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\001\002\000\134" +
    "\004\ufff2\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\001" +
    "\002\000\010\046\110\047\112\071\144\001\002\000\010" +
    "\010\113\012\116\013\115\001\002\000\010\005\uffed\012" +
    "\uffed\013\150\001\002\000\006\005\ufff1\012\ufff1\001\002" +
    "\000\006\005\ufff0\012\ufff0\001\002\000\106\004\025\005" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\015" +
    "\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\060\016\065\033\066\061\067\026\070\055\071\023" +
    "\001\002\000\006\005\uffee\012\uffee\001\002\000\142\002" +
    "\uffec\004\uffec\006\uffec\007\uffec\010\uffec\013\uffec\014\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\001\002\000\014\005\uffa6\012\uffa6\046" +
    "\110\047\112\071\uffa6\001\002\000\102\004\025\013\uffb0" +
    "\014\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023" +
    "\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033" +
    "\066\061\067\026\070\055\071\023\001\002\000\112\004" +
    "\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061" +
    "\067\026\070\055\071\023\001\002\000\112\004\025\005" +
    "\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\015\021\013\022\011\023\007\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067\026" +
    "\070\055\071\023\001\002\000\112\004\025\005\uffb0\010" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\065\033\066\061\067\026\070\055" +
    "\071\023\001\002\000\112\004\025\005\uffb0\010\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015" +
    "\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\065\033\066\061\067\026\070\055\071\023" +
    "\001\002\000\014\005\uffbb\010\uffbb\012\uffbb\015\uffbb\045" +
    "\uffbb\001\002\000\014\005\uffba\010\uffba\012\uffba\015\uffba" +
    "\045\uffba\001\002\000\030\005\uffbd\010\uffbd\012\uffbd\013" +
    "\uffbd\015\uffbd\040\164\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\001\002\000\112\004\025\005\uffb0\010\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015" +
    "\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\065\033\066\061\067\026\070\055\071\023" +
    "\001\002\000\030\005\uffbf\010\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\001\002\000\014\005\uffb9\010\uffb9\012\uffb9\015\uffb9\045" +
    "\uffb9\001\002\000\004\045\170\001\002\000\112\004\025" +
    "\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\015\021\013\022\011\023\007\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067" +
    "\026\070\055\071\023\001\002\000\014\005\uffb8\010\uffb8" +
    "\012\uffb8\015\uffb8\045\uffb8\001\002\000\070\005\uffaf\010" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\001" +
    "\002\000\112\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015\021\013\022" +
    "\011\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\065\033\066\061\067\026\070\055\071\023\001\002\000" +
    "\112\004\025\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023" +
    "\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033" +
    "\066\061\067\026\070\055\071\023\001\002\000\044\005" +
    "\uffc2\010\uffc2\012\uffc2\013\uffc2\015\uffc2\032\176\033\201" +
    "\034\200\035\177\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\001\002\000\112\004\025" +
    "\005\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\015\021\013\022\011\023\007\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067" +
    "\026\070\055\071\023\001\002\000\112\004\025\005\uffb0" +
    "\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\015\021\013\022\011\023\007\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\065\033\066\061\067\026\070" +
    "\055\071\023\001\002\000\112\004\025\005\uffb0\010\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\112\004\025\005\uffb0\010\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\015\021" +
    "\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\065\033\066\061\067\026\070\055\071\023\001" +
    "\002\000\050\005\uffc6\010\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\030\063\031\062\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\001\002\000\050\005\uffc5\010\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\030\063\031\062\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\001\002\000\050\005\uffc4\010\uffc4" +
    "\012\uffc4\013\uffc4\015\uffc4\030\063\031\062\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\001\002\000\050\005" +
    "\uffc7\010\uffc7\012\uffc7\013\uffc7\015\uffc7\030\063\031\062" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\001\002" +
    "\000\044\005\uffc1\010\uffc1\012\uffc1\013\uffc1\015\uffc1\032" +
    "\176\033\201\034\200\035\177\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002\000" +
    "\004\005\210\001\002\000\070\005\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002\000\134" +
    "\004\025\006\024\007\212\010\uffb0\013\uffb0\014\uffb0\016" +
    "\uffb0\017\uffb0\020\015\021\013\022\011\023\007\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\050\044\051\043\052\040\053" +
    "\036\055\022\056\021\057\017\060\016\061\014\063\010" +
    "\064\006\065\033\066\061\067\026\070\055\071\023\001" +
    "\002\000\142\002\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\071\uffe5\001\002\000\106\004" +
    "\025\005\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0" +
    "\020\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\060\016\065\033\066\061\067\026\070\055" +
    "\071\023\001\002\000\004\005\220\001\002\000\006\005" +
    "\uffad\012\216\001\002\000\106\004\025\005\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\015\021\013\022" +
    "\011\023\007\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\060\016" +
    "\065\033\066\061\067\026\070\055\071\023\001\002\000" +
    "\004\005\uffac\001\002\000\070\005\uffdc\010\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\104" +
    "\004\025\005\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020" +
    "\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\060\016\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\004\005\223\001\002\000\132\004\025" +
    "\006\024\010\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020" +
    "\015\021\013\022\011\023\007\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\050\044\051\043\052\040\053\036\055\022\056" +
    "\021\057\017\060\016\061\014\063\010\064\006\065\033" +
    "\066\061\067\026\070\055\071\023\001\002\000\142\002" +
    "\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\226\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\001\002\000\142\002\uffe4\004\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\001\002\000\132\004\025\006\024\010\uffb0\013\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\050\044\051\043\052" +
    "\040\053\036\055\022\056\021\057\017\060\016\061\014" +
    "\063\010\064\006\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\142\002\uffe3\004\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\001\002\000" +
    "\004\010\231\001\002\000\142\002\uffe7\004\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\001" +
    "\002\000\012\005\uffb6\010\uffb6\012\uffb6\015\uffb6\001\002" +
    "\000\070\005\uffd6\010\uffd6\012\uffd6\013\uffd6\014\102\015" +
    "\uffd6\016\101\017\103\022\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\001\002\000\004\071\235\001\002\000" +
    "\004\010\236\001\002\000\142\002\uffeb\004\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\001" +
    "\002\000\070\005\uffd5\010\uffd5\012\uffd5\013\uffd5\014\102" +
    "\015\uffd5\016\101\017\103\022\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\001\002\000\004\010\241\001\002" +
    "\000\136\002\ufffc\004\ufffc\006\ufffc\010\ufffc\013\ufffc\014" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\001\002\000\070\005\uffd4\010\uffd4\012\uffd4" +
    "\013\uffd4\014\102\015\uffd4\016\101\017\103\022\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\001\002\000\070" +
    "\005\uffd3\010\uffd3\012\uffd3\013\uffd3\014\102\015\uffd3\016" +
    "\101\017\103\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\001\002\000\104\004\025\005\uffb0\013\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\060\016\065\033\066" +
    "\061\067\026\070\055\071\023\001\002\000\004\005\246" +
    "\001\002\000\132\004\025\006\024\010\uffb0\013\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\020\015\021\013\022\011\023\007" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\050\044\051\043\052" +
    "\040\053\036\055\022\056\021\057\017\060\016\061\014" +
    "\063\010\064\006\065\033\066\061\067\026\070\055\071" +
    "\023\001\002\000\142\002\uffe6\004\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\054\005\017\007\045\015\044\017\050\020\052" +
    "\021\053\022\055\023\056\024\057\025\026\026\027\027" +
    "\034\030\036\031\040\032\041\033\047\034\033\035\031" +
    "\036\030\037\046\041\051\001\001\000\002\001\001\000" +
    "\012\007\063\017\050\020\242\037\046\001\001\000\002" +
    "\001\001\000\012\007\063\017\050\020\241\037\046\001" +
    "\001\000\004\007\237\001\001\000\012\007\063\017\050" +
    "\020\236\037\046\001\001\000\004\007\233\001\001\000" +
    "\012\007\063\017\050\020\232\037\046\001\001\000\044" +
    "\007\063\017\050\020\052\021\053\022\055\023\056\024" +
    "\057\025\026\026\027\027\034\030\036\031\040\032\231" +
    "\034\033\035\031\036\030\037\046\001\001\000\046\007" +
    "\063\017\050\020\052\021\053\022\055\023\056\024\057" +
    "\025\026\026\027\027\034\030\036\031\040\032\041\033" +
    "\227\034\033\035\031\036\030\037\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\210\001\001\000\046\007\063\017\050" +
    "\020\052\021\053\022\055\023\056\024\057\025\026\026" +
    "\027\027\034\030\036\031\040\032\041\033\206\034\033" +
    "\035\031\036\030\037\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\127\041\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\063" +
    "\017\050\020\052\021\053\022\055\023\077\037\046\001" +
    "\001\000\020\007\063\017\050\020\052\021\053\022\055" +
    "\023\064\037\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\063\017\050\020\052\021\053\022\076" +
    "\037\046\001\001\000\016\007\063\017\050\020\052\021" +
    "\053\022\067\037\046\001\001\000\002\001\001\000\014" +
    "\007\063\017\050\020\052\021\075\037\046\001\001\000" +
    "\014\007\063\017\050\020\052\021\074\037\046\001\001" +
    "\000\014\007\063\017\050\020\052\021\073\037\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\063\017" +
    "\106\037\046\001\001\000\046\007\063\017\050\020\052" +
    "\021\053\022\055\023\056\024\057\025\026\026\027\027" +
    "\034\030\036\031\040\032\041\033\104\034\033\035\031" +
    "\036\030\037\046\001\001\000\010\007\063\017\103\037" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\127" +
    "\010\126\012\130\041\125\001\001\000\046\007\063\017" +
    "\050\020\052\021\053\022\055\023\056\024\057\025\026" +
    "\026\027\027\034\030\036\031\040\032\041\033\123\034" +
    "\033\035\031\036\030\037\046\001\001\000\004\007\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\127\010\132\012\130\041\125\001\001\000\002\001" +
    "\001\000\004\006\136\001\001\000\002\001\001\000\004" +
    "\011\137\001\001\000\002\001\001\000\052\007\045\015" +
    "\141\017\050\020\052\021\053\022\055\023\056\024\057" +
    "\025\026\026\027\027\034\030\036\031\040\032\041\033" +
    "\047\034\033\035\031\036\030\037\046\041\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\007\063\017\050\020\052\021" +
    "\053\022\055\023\056\024\057\025\026\026\027\027\034" +
    "\030\036\031\040\032\041\033\150\034\033\035\031\036" +
    "\030\037\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\063\017\050\020\052\021" +
    "\053\022\055\023\056\024\057\025\026\026\027\027\034" +
    "\030\036\031\166\034\033\035\031\036\030\037\046\001" +
    "\001\000\042\007\063\017\050\020\052\021\053\022\055" +
    "\023\056\024\057\025\026\026\027\027\034\030\036\031" +
    "\165\034\033\035\031\036\030\037\046\001\001\000\036" +
    "\007\063\017\050\020\052\021\053\022\055\023\056\024" +
    "\057\025\026\026\027\027\162\034\033\035\031\036\030" +
    "\037\046\001\001\000\042\007\063\017\050\020\052\021" +
    "\053\022\055\023\056\024\057\025\026\026\027\027\034" +
    "\030\036\031\161\034\033\035\031\036\030\037\046\001" +
    "\001\000\042\007\063\017\050\020\052\021\053\022\055" +
    "\023\056\024\057\025\026\026\027\027\034\030\036\031" +
    "\160\034\033\035\031\036\030\037\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\063\017\050\020\052\021\053\022\055\023\056\024\057" +
    "\025\026\026\027\034\164\035\031\036\030\037\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\007\063\017\050\020\052\021\053\022\055\023" +
    "\056\024\057\025\026\026\027\027\034\030\036\031\170" +
    "\034\033\035\031\036\030\037\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\063\017\050\020\052" +
    "\021\053\022\055\023\056\024\057\025\205\037\046\001" +
    "\001\000\024\007\063\017\050\020\052\021\053\022\055" +
    "\023\056\024\057\025\174\037\046\001\001\000\002\001" +
    "\001\000\022\007\063\017\050\020\052\021\053\022\055" +
    "\023\056\024\204\037\046\001\001\000\022\007\063\017" +
    "\050\020\052\021\053\022\055\023\056\024\203\037\046" +
    "\001\001\000\022\007\063\017\050\020\052\021\053\022" +
    "\055\023\056\024\202\037\046\001\001\000\022\007\063" +
    "\017\050\020\052\021\053\022\055\023\056\024\201\037" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\007\045\015\141\017\050" +
    "\020\052\021\053\022\055\023\056\024\057\025\026\026" +
    "\027\027\034\030\036\031\040\032\041\033\047\034\033" +
    "\035\031\036\030\037\046\041\142\001\001\000\002\001" +
    "\001\000\050\007\063\017\050\020\052\021\053\022\055" +
    "\023\056\024\057\025\026\026\027\027\034\030\036\031" +
    "\040\032\041\033\214\034\033\035\031\036\030\037\046" +
    "\040\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\007\063\017\050\020\052\021\053\022\055\023\056" +
    "\024\057\025\026\026\027\027\034\030\036\031\040\032" +
    "\041\033\214\034\033\035\031\036\030\037\046\040\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\007" +
    "\063\017\050\020\052\021\053\022\055\023\056\024\057" +
    "\025\026\026\027\027\034\030\036\031\040\032\041\033" +
    "\221\034\033\035\031\036\030\037\046\001\001\000\002" +
    "\001\001\000\052\007\045\015\223\017\050\020\052\021" +
    "\053\022\055\023\056\024\057\025\026\026\027\027\034" +
    "\030\036\031\040\032\041\033\047\034\033\035\031\036" +
    "\030\037\046\041\142\001\001\000\004\016\224\001\001" +
    "\000\002\001\001\000\052\007\045\015\226\017\050\020" +
    "\052\021\053\022\055\023\056\024\057\025\026\026\027" +
    "\027\034\030\036\031\040\032\041\033\047\034\033\035" +
    "\031\036\030\037\046\041\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\007\063" +
    "\017\050\020\052\021\053\022\055\023\056\024\057\025" +
    "\026\026\027\027\034\030\036\031\040\032\041\033\244" +
    "\034\033\035\031\036\030\037\046\001\001\000\002\001" +
    "\001\000\052\007\045\015\246\017\050\020\052\021\053" +
    "\022\055\023\056\024\057\025\026\026\027\027\034\030" +
    "\036\031\040\032\041\033\047\034\033\035\031\036\030" +
    "\037\046\041\142\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public lab1.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (lab1.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Type ::= ListId 
            {
              lab1.Absyn.Type RESULT = null;
		lab1.Absyn.ListId p_1 = (lab1.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.TQual(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Type ::= Type _SYMB_35 
            {
              lab1.Absyn.Type RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.TDRef(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Type ::= Type _SYMB_34 
            {
              lab1.Absyn.Type RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.TRef(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Type ::= _SYMB_38 Type 
            {
              lab1.Absyn.Type RESULT = null;
		lab1.Absyn.Type p_2 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.TConst(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Type ::= _SYMB_47 
            {
              lab1.Absyn.Type RESULT = null;
		 RESULT = new lab1.Absyn.Tvoid(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Type ::= _SYMB_37 
            {
              lab1.Absyn.Type RESULT = null;
		 RESULT = new lab1.Absyn.Tchar(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Type ::= _SYMB_42 
            {
              lab1.Absyn.Type RESULT = null;
		 RESULT = new lab1.Absyn.Tint(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Type ::= _SYMB_39 
            {
              lab1.Absyn.Type RESULT = null;
		 RESULT = new lab1.Absyn.Tdouble(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Type ::= _SYMB_36 
            {
              lab1.Absyn.Type RESULT = null;
		 RESULT = new lab1.Absyn.Tbool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ListExp ::= Exp _SYMB_6 ListExp 
            {
              lab1.Absyn.ListExp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.ListExp p_3 = (lab1.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListExp ::= Exp 
            {
              lab1.Absyn.ListExp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListExp ::= 
            {
              lab1.Absyn.ListExp RESULT = null;
		 RESULT = new lab1.Absyn.ListExp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ListExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListString ::= _STRING_ ListString 
            {
              lab1.Absyn.ListString RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lab1.Absyn.ListString p_2 = (lab1.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListString*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListString ::= 
            {
              lab1.Absyn.ListString RESULT = null;
		 RESULT = new lab1.Absyn.ListString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ListString*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp7 ::= Exp8 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Exp7*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp6 ::= Exp7 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Exp6*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp5 ::= Exp6 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Exp5*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp ::= Exp1 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp1 ::= Exp2 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp1 ::= _SYMB_44 Exp1 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EThrow(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp2 ::= Exp3 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp2 ::= Exp3 _SYMB_32 Exp2 _SYMB_33 Exp2 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_5 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ECond(p_1,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp2 ::= Exp3 _SYMB_31 Exp2 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ESubAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp2 ::= Exp3 _SYMB_30 Exp2 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EAddAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 _SYMB_7 Exp2 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Exp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp3 ::= Exp4 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Exp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp3 ::= Exp3 _SYMB_29 Exp4 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EDisj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Exp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp4 ::= Exp5 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Exp4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp4 ::= Exp4 _SYMB_28 Exp5 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EConj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Exp4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp8 ::= Exp9 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp8 ::= Exp8 _SYMB_27 Exp9 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ENEqual(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp8 ::= Exp8 _SYMB_26 Exp9 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EEqual(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*Exp8*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp9 ::= Exp10 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp9 ::= Exp9 _SYMB_25 Exp10 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EGeq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp9 ::= Exp9 _SYMB_24 Exp10 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EGrea(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp9 ::= Exp9 _SYMB_23 Exp10 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ELeq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp9 ::= Exp9 _SYMB_22 Exp10 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ELess(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Exp9*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp10 ::= Exp11 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp10 ::= Exp10 _SYMB_21 Exp11 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ERShift(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp10 ::= Exp10 _SYMB_20 Exp11 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ELShift(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Exp10*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp11 ::= Exp12 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp11 ::= Exp11 _SYMB_19 Exp12 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp11 ::= Exp11 _SYMB_18 Exp12 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Exp11*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp12 ::= Exp13 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp12 ::= Exp12 _SYMB_17 Exp13 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp12 ::= Exp12 _SYMB_16 Exp13 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp12 ::= Exp12 _SYMB_14 Exp13 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Exp12*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp13 ::= Exp14 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp13 ::= _SYMB_15 Exp14 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ENeg(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp13 ::= _SYMB_14 Exp14 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EDeref(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp13 ::= _SYMB_13 Exp14 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ERDecr(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp13 ::= _SYMB_12 Exp14 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ERIncr(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Exp13*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp14 ::= Exp15 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp14 ::= Exp14 _SYMB_11 Exp15 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EArwProj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp14 ::= Exp14 _SYMB_10 Exp15 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EDotProj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp14 ::= Exp14 _SYMB_8 Exp _SYMB_9 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.EIndex(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp14*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp15 ::= _SYMB_0 Exp _SYMB_1 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp15 ::= Id _SYMB_0 ListExp _SYMB_1 
            {
              lab1.Absyn.Exp RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lab1.Absyn.ListExp p_3 = (lab1.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.ECall(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp15 ::= ListId 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.ListId p_1 = (lab1.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EQua(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp15 ::= _CHAR_ 
            {
              lab1.Absyn.Exp RESULT = null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EChar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp15 ::= ListString 
            {
              lab1.Absyn.Exp RESULT = null;
		lab1.Absyn.ListString p_1 = (lab1.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp15 ::= _DOUBLE_ 
            {
              lab1.Absyn.Exp RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EDouble(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp15 ::= _INTEGER_ 
            {
              lab1.Absyn.Exp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.EInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Exp15*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IRest ::= 
            {
              lab1.Absyn.IRest RESULT = null;
		 RESULT = new lab1.Absyn.SEmp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*IRest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IRest ::= _SYMB_40 Stm 
            {
              lab1.Absyn.IRest RESULT = null;
		lab1.Absyn.Stm p_2 = (lab1.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.SElse(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*IRest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stm ::= _SYMB_41 _SYMB_0 Exp _SYMB_1 Stm IRest 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lab1.Absyn.Stm p_5 = (lab1.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lab1.Absyn.IRest p_6 = (lab1.Absyn.IRest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.SIf(p_3,p_5,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.ListStm p_2 = (lab1.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.SBlock(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stm ::= _SYMB_48 _SYMB_0 Exp _SYMB_1 Stm 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Exp p_3 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Stm p_5 = (lab1.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stm ::= _SYMB_43 Exp _SYMB_4 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.SReturn(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stm ::= Type Id _SYMB_7 Exp _SYMB_4 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lab1.Absyn.Exp p_4 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.SInit(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stm ::= Type Id _SYMB_6 ListId _SYMB_4 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lab1.Absyn.ListId p_4 = (lab1.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.SDecls(p_1,p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stm ::= Type Id _SYMB_4 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stm ::= _SYMB_45 ListId Id _SYMB_4 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.ListId p_2 = (lab1.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.STypedef(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stm ::= Exp _SYMB_4 
            {
              lab1.Absyn.Stm RESULT = null;
		lab1.Absyn.Exp p_1 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARRest ::= 
            {
              lab1.Absyn.ARRest RESULT = null;
		 RESULT = new lab1.Absyn.AREmp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ARRest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRest ::= _SYMB_7 Exp 
            {
              lab1.Absyn.ARRest RESULT = null;
		lab1.Absyn.Exp p_2 = (lab1.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ARInit(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*ARRest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARest ::= 
            {
              lab1.Absyn.ARest RESULT = null;
		 RESULT = new lab1.Absyn.AEmp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ARest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARest ::= Id ARRest 
            {
              lab1.Absyn.ARest RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lab1.Absyn.ARRest p_2 = (lab1.Absyn.ARRest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.AId(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ARest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Arg ::= Type ARest 
            {
              lab1.Absyn.Arg RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lab1.Absyn.ARest p_2 = (lab1.Absyn.ARest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ADecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Arg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListStm ::= ListStm Stm 
            {
              lab1.Absyn.ListStm RESULT = null;
		lab1.Absyn.ListStm p_1 = (lab1.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lab1.Absyn.Stm p_2 = (lab1.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListStm ::= 
            {
              lab1.Absyn.ListStm RESULT = null;
		 RESULT = new lab1.Absyn.ListStm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListArg ::= Arg _SYMB_6 ListArg 
            {
              lab1.Absyn.ListArg RESULT = null;
		lab1.Absyn.Arg p_1 = (lab1.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.ListArg p_3 = (lab1.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListArg ::= Arg 
            {
              lab1.Absyn.ListArg RESULT = null;
		lab1.Absyn.Arg p_1 = (lab1.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListArg ::= 
            {
              lab1.Absyn.ListArg RESULT = null;
		 RESULT = new lab1.Absyn.ListArg(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*ListArg*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListId ::= Id _SYMB_5 ListId 
            {
              lab1.Absyn.ListId RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.ListId p_3 = (lab1.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListId*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListId ::= Id 
            {
              lab1.Absyn.ListId RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListId*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Rest ::= _SYMB_4 
            {
              lab1.Absyn.Rest RESULT = null;
		 RESULT = new lab1.Absyn.REnd(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Rest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Rest ::= _SYMB_2 ListStm _SYMB_3 
            {
              lab1.Absyn.Rest RESULT = null;
		lab1.Absyn.ListStm p_2 = (lab1.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.RStm(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Rest*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Def ::= Stm 
            {
              lab1.Absyn.Def RESULT = null;
		lab1.Absyn.Stm p_1 = (lab1.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.DStm(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Def ::= _SYMB_46 ListId _SYMB_4 
            {
              lab1.Absyn.Def RESULT = null;
		lab1.Absyn.ListId p_2 = (lab1.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new lab1.Absyn.DQua(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 Rest 
            {
              lab1.Absyn.Def RESULT = null;
		lab1.Absyn.Type p_1 = (lab1.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		lab1.Absyn.ListArg p_4 = (lab1.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lab1.Absyn.Rest p_6 = (lab1.Absyn.Rest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.DFun(p_1,p_2,p_4,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Def*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              lab1.Absyn.ListDef RESULT = null;
		lab1.Absyn.ListDef p_1 = (lab1.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lab1.Absyn.Def p_2 = (lab1.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              lab1.Absyn.ListDef RESULT = null;
		 RESULT = new lab1.Absyn.ListDef(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListDef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              lab1.Absyn.Program RESULT = null;
		lab1.Absyn.ListDef p_1 = (lab1.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new lab1.Absyn.PDefs(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		lab1.Absyn.Program start_val = (lab1.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

